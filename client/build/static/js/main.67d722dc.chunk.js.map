{"version":3,"sources":["logo.svg","Calc.js","App.js","reportWebVitals.js","index.js"],"names":["Calc","refPeople","useRef","refDay","refResult","useState","people","maxPeople","day","peoplePrice","allprice","salePrice","additionPrice","state","setState","checkAction","e","val","parseInt","target","value","contion","checked","prevState","className","name","placeholder","onChange","isFinite","onBlur","trim","type","min","max","toFixed","ref","defaultValue","price","count","totalSale","Array","fill","reduce","total","el","calcSale","for","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.67d722dc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useRef, useState} from 'react';\r\n\r\nexport default function Calc(){\r\n    const refPeople = useRef(null);\r\n    const refDay = useRef(null);\r\n    const refResult = useRef(null)\r\n    const [state,setState] = useState({\r\n        people: 1000,\r\n        maxPeople: 100000,\r\n        day: 1,\r\n        peoplePrice: 0.1,\r\n        allprice: (1000 * 0.1) * 1,\r\n        salePrice: 0,\r\n        additionPrice: 0\r\n    })\r\n\r\n\r\n    const calcSale = (price, day) => {\r\n        const sale = .95;\r\n        const count =  parseInt((day / 10).toFixed(0));\r\n        const totalSale = Array(count).fill(\"\").reduce((total, el) => {\r\n            return total * sale\r\n        },price)\r\n        setState((prevState) => {\r\n            return {...prevState, salePrice: totalSale.toFixed(1)}\r\n        })\r\n    }\r\n    \r\n\r\n    const fnpeople = (e) => {\r\n        const val = parseInt(e.target.value);\r\n        const {peoplePrice, day} = state;\r\n        \r\n\r\n        setState((prevState) => {\r\n            return {...prevState, allprice: ((val * peoplePrice) * day).toFixed(1), people:  val}\r\n        })\r\n    } \r\n\r\n    const fnday = (e) => {\r\n        const val = parseInt(e.target.value)\r\n        const {peoplePrice, people} = state;\r\n\r\n        setState((prevState) => {\r\n            calcSale((people * peoplePrice) * val, val)\r\n            return {...prevState, allprice: (people * peoplePrice) * val, day: val }\r\n        })\r\n    } \r\n\r\n    const checkAction = (e) => {\r\n        const val = parseInt(e.target.value)\r\n        const contion = e.target.checked;\r\n        contion ?  setState((prevState) => {return {...prevState, additionPrice: parseInt(prevState.additionPrice) + val} }) :  setState((prevState) => {return {...prevState, additionPrice: parseInt(prevState.additionPrice) - val} })\r\n    }\r\n\r\n    const newCounMaxPeople = (e) => {\r\n        const val = parseInt(e.target.value);\r\n        if(isFinite(val)) setState((prevState) => {return {...prevState, maxPeople: 100000} })\r\n        if(val > 1000) setState((prevState) => {return {...prevState, maxPeople: val} })\r\n    }\r\n\r\n    const newCounMaxEmpty = (e) => {\r\n        const val = e.target.value;\r\n        if(val.trim() === \"\") setState((prevState) => {return {...prevState, maxPeople: 100000} })\r\n    }\r\n\r\n\r\n    return  (\r\n    <div className=\"calc-section\">\r\n\r\n        <div className=\"s-input\">\r\n\r\n            <span className=\"s-input__start\">min:1000</span>\r\n            <span>\r\n                Люди \r\n                <input className=\"line__appendLine\" name=\"newcountPeople\" placeholder=\"введите число выше 1000\" onChange={newCounMaxPeople} onBlur={newCounMaxEmpty}/>\r\n            </span> \r\n            <input className=\"line__input\" name=\"people\" type=\"range\" min=\"1000\" max={state.maxPeople} onChange={fnpeople}/>\r\n            <span ref={refPeople} className=\"count\" >{state.people}</span>\r\n            \r\n        </div>\r\n        \r\n        <div className=\"s-input\">\r\n            <span className=\"s-input__start\">min:1</span>\r\n            <span>Дни</span>\r\n            <input className=\"line__input\" name=\"day\" type=\"range\" min=\"1\" max=\"180\" defaultValue=\"1\" onChange={fnday}/>\r\n            <span ref={refDay} className=\"count\" >{state.day}</span>\r\n        </div>\r\n\r\n        <div className=\"s-input s-input--checkbox\">\r\n            <label for=\"50\">\r\n                50\r\n                <input onChange={checkAction} className=\"checkbox-price\" name=\"50\" type=\"checkbox\" value=\"50\"/>\r\n            </label>\r\n            <label for=\"100\">\r\n                100\r\n                <input onChange={checkAction} className=\"checkbox-price\" name=\"100\" type=\"checkbox\" value=\"100\"/>\r\n            </label>\r\n            <label for=\"200\">\r\n                200\r\n                <input onChange={checkAction} className=\"checkbox-price\" name=\"200\" type=\"checkbox\" value=\"200\"/>\r\n            </label>\r\n        </div>\r\n\r\n\r\n        <div ref={refResult} className=\"show-result\"><span className=\"result_field\">result:</span>\r\n            {state.day < 10 ? <span>{+state.allprice + state.additionPrice}$</span> : <><span className=\"sale\" >{+state.allprice + state.additionPrice}$</span><span>{+state.salePrice + state.additionPrice}$</span></>  } \r\n        </div>\r\n        \r\n\r\n    </div>)\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Calc from './Calc';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Calc/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}